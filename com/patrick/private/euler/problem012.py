from com.patrick.private.utils.benchmark import Benchmark
from com.patrick.private.utils.math_utils import MathUtils


class Problem12(object):
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

             1: 1
             3: 1,3
             6: 1,2,3,6
            10: 1,2,5,10
            15: 1,3,5,15
            21: 1,3,7,21
            28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    """

    def __init__(self, limit: int):
        self.limit = limit
        print(f"Problem 12: What is the value of the first triangle number to have over {self.limit} divisors")
        print(f"limit={self.limit}")

    @Benchmark
    def attempt_1(self):
        result = 0
        i = 1
        while True:
            result += i
            divisors = MathUtils.divisors(result)
            if len(divisors) > self.limit:
                break

            i += 1

        print("")
        print(f"Result: {result} - {divisors}")

    @Benchmark
    def official_solution(self):
        result = "N/A"
        print("")
        print(f"Result: {result}")


if __name__ == '__main__':
    problem = Problem12(limit=500)

    problem.attempt_1()
    problem.official_solution()
